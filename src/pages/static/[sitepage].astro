---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getAllPosts,
  getStaticBySlug,
  getBlock,
  getAllStaticTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getStaticLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import SiteStaticsLink from '../../components/SiteStaticsLink.astro'
import SiteTagsLink from '../../components/SiteTagsLink.astro'
import styles from '../../styles/blog.module.css'
import { getMenuStatics } from '../../lib/notion/client'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts
    .filter((post) => post.Dir === 'Site')
    .map((post: interfaces.Post) => ({
      params: { sitepage: post.Slug },
    }))
}

const { sitepage } = Astro.params

const post = await getStaticBySlug(sitepage)
// console.log(post)
if (!post) {
  throw new Error('Post not found. sitepage: ${sitepage}')
}

const [blocks, menuStatics, tags] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
  getMenuStatics(),
  getAllStaticTags(),
])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getStaticLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main" class={styles.main}>
    <div class={styles.post}>
      <PostTags post={post} />
      <PostTitle post={post} enableLink={false} />
      <PostBody blocks={blocks} />
    </div>
  </div>

  <div slot="aside" class="aside">
    <SiteStaticsLink heading="menu" posts={menuStatics} />
    <SiteTagsLink heading="Categories" tags={tags} />
  </div>
</Layout>
